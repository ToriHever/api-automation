// utils/debug-universal.js - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
require('dotenv').config();

function getFormattedDate(daysOffset = 0) {
    const date = new Date();
    date.setDate(date.getDate() + daysOffset);
    return date.toISOString().split('T')[0];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
async function getCollector(serviceName) {
    const collectorsMap = {
        'topvisor': () => require('../services/topvisor/TopVisorCollector'),
        'wordstat': () => require('../services/wordstat/WordStatCollector'),
        'clarity': () => require('../services/clarity/ClarityCollector'),
        'ga4': () => require('../services/ga4/GA4Collector'),
        'gsc': () => require('../services/gsc/GSCCollector'),
        'yandex-metrika': () => require('../services/yandex-metrika/YandexMetrikaCollector')
    };

    if (!collectorsMap[serviceName]) {
        throw new Error(`–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ "${serviceName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    try {
        const CollectorClass = collectorsMap[serviceName]();
        return new CollectorClass();
    } catch (error) {
        if (error.code === 'MODULE_NOT_FOUND') {
            console.error(`‚ùå –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ "${serviceName}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`);
        }
        throw error;
    }
}

async function debugService(serviceName, testDate) {
    console.log(`üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ò–°–ê: ${serviceName.toUpperCase()}\n`);
    
    try {
        const collector = await getCollector(serviceName);
        
        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...");
        await collector.checkApiConnection();
        console.log("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n");

        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...");
        await collector.dbManager.connect();
        console.log("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n");

        console.log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...");
        const data = await collector.fetchData(testDate, testDate);
        
        console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–ª—É—á–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π\n`);

        if (data.length > 0) {
            console.log("üîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:");
            data.slice(0, 3).forEach((record, index) => {
                console.log(`   ${index + 1}. ${JSON.stringify(record).substring(0, 100)}...`);
            });
        }

        await collector.dbManager.disconnect();
        return { success: true, records: data.length };

    } catch (error) {
        console.error("‚ùå –û–®–ò–ë–ö–ê:", error.message);
        return { success: false, error: error.message };
    }
}

async function main() {
    console.log("üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ò–°–û–í\n");

    const serviceName = process.argv[2];
    const testDate = process.argv[3] || getFormattedDate(-1);

    if (!serviceName) {
        console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
        console.log("  node utils/debug-universal.js <—Å–µ—Ä–≤–∏—Å> [–¥–∞—Ç–∞]");
        console.log("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:");
        console.log("  topvisor, wordstat, clarity, ga4, gsc, yandex-metrika");
        console.log("\n–ü—Ä–∏–º–µ—Ä—ã:");
        console.log("  node utils/debug-universal.js topvisor");
        console.log("  node utils/debug-universal.js topvisor 2025-09-15");
        process.exit(1);
    }

    console.log(`üéØ –°–µ—Ä–≤–∏—Å: ${serviceName}`);
    console.log(`üìÖ –î–∞—Ç–∞: ${testDate}\n`);

    await debugService(serviceName, testDate);
}

if (require.main === module) {
    main().catch(console.error);
}