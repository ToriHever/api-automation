import axios from "axios";
import pkg from "pg";
import dotenv from "dotenv";

dotenv.config();
const { Client } = pkg;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
function getFormattedDate(daysOffset = 0) {
    const date = new Date();
    date.setDate(date.getDate() + daysOffset);
    return date.toISOString().split('T')[0];
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç
const START_DATE = process.env.START_DATE || getFormattedDate(-1); // –í—á–µ—Ä–∞
const END_DATE = process.env.END_DATE || getFormattedDate(-1);     // –í—á–µ—Ä–∞

// –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥
const MANUAL_MODE = process.env.MANUAL_MODE === 'true';
const MANUAL_START = process.env.MANUAL_START_DATE;
const MANUAL_END = process.env.MANUAL_END_DATE;

// –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
const FINAL_START_DATE = MANUAL_MODE && MANUAL_START ? MANUAL_START : START_DATE;
const FINAL_END_DATE = MANUAL_MODE && MANUAL_END ? MANUAL_END : END_DATE;

// —Å–ª–æ–≤–∞—Ä—å –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤
const searchEngineMap = {
    "7": "Google",
    "5": "Yandex",
    "159": "Google",
    "701": "Bing"
};

// —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–µ–∫—Ç–æ–≤
const projectMap = {
    "11430357": "–¢–µ—Ä–º–∏–Ω—ã",
    "7093082": "–ë–ª–æ–≥",
    "7063718": "DDG-EN",
    "7063822": "DDG-RU"
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const apiRequests = [
    {
        name: "–ü–æ–∑–∏—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ RU —Å–∞–π—Ç—É –¥–ª—è –Ø–Ω–¥–µ–∫—Å",
        body: {
            "project_id": "7063822",
            "regions_indexes": ["5"],
            "date1": FINAL_START_DATE,
            "date2": FINAL_END_DATE,
            "positions_fields": ["relevant_url", "position", "snippet"],
            "show_groups": true
        }
    },
    {
        name: "–ü–æ–∑–∏—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ RU —Å–∞–π—Ç—É –¥–ª—è Google",
        body: {
            "project_id": "7063822",
            "regions_indexes": ["7"],
            "date1": FINAL_START_DATE,
            "date2": FINAL_END_DATE,
            "positions_fields": ["relevant_url", "position", "snippet"],
            "show_groups": true
        }
    },
    {
        name: "–ü–æ–∑–∏—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ EN —Å–∞–π—Ç—É –¥–ª—è Google",
        body: {
            "project_id": "7063718",
            "regions_indexes": ["159"],
            "date1": FINAL_START_DATE,
            "date2": FINAL_END_DATE,
            "positions_fields": ["relevant_url", "position", "snippet"],
            "show_groups": true
        }
    },
    {
        name: "–ü–æ–∑–∏—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ EN —Å–∞–π—Ç—É –¥–ª—è Bing",
        body: {
            "project_id": "7063718",
            "regions_indexes": ["701"],
            "date1": FINAL_START_DATE,
            "date2": FINAL_END_DATE,
            "positions_fields": ["relevant_url", "position", "snippet"],
            "show_groups": true
        }
    },
    {
        name: "–ü–æ–∑–∏—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ –ë–ª–æ–≥ –¥–ª—è –Ø–Ω–¥–µ–∫—Å",
        body: {
            "project_id": "7093082",
            "regions_indexes": ["5"],
            "date1": FINAL_START_DATE,
            "date2": FINAL_END_DATE,
            "positions_fields": ["relevant_url", "position", "snippet"],
            "show_groups": true
        }
    },
    {
        name: "–ü–æ–∑–∏—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ –ë–ª–æ–≥ –¥–ª—è Google",
        body: {
            "project_id": "7093082",
            "regions_indexes": ["7"],
            "date1": FINAL_START_DATE,
            "date2": FINAL_END_DATE,
            "positions_fields": ["relevant_url", "position", "snippet"],
            "show_groups": true
        }
    },
    {
        name: "–ü–æ–∑–∏—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ –¢–µ—Ä–º–∏–Ω—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å",
        body: {
            "project_id": "11430357",
            "regions_indexes": ["5"],
            "date1": FINAL_START_DATE,
            "date2": FINAL_END_DATE,
            "positions_fields": ["relevant_url", "position", "snippet"],
            "show_groups": true
        }
    },
    {
        name: "–ü–æ–∑–∏—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ –¢–µ—Ä–º–∏–Ω—ã –¥–ª—è Google",
        body: {
            "project_id": "11430357",
            "regions_indexes": ["7"],
            "date1": FINAL_START_DATE,
            "date2": FINAL_END_DATE,
            "positions_fields": ["relevant_url", "position", "snippet"],
            "show_groups": true
        }
    }
];

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const client = new Client({
    host: process.env.PGHOST,
    user: process.env.PGUSER,
    password: process.env.PGPASSWORD,
    database: process.env.PGDATABASE,
    port: process.env.PGPORT,
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function makeApiRequest(requestConfig, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å: ${requestConfig.name} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
            
            const response = await axios.post(
                process.env.API_URL,
                requestConfig.body,
                {
                    headers: {
                        Authorization: `Bearer ${process.env.API_KEY}`,
                        "User-Id": process.env.USER_ID,
                        "Content-Type": "application/json"
                    },
                    timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                }
            );

            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å "${requestConfig.name}" –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            return response.data;

        } catch (error) {
            if (error.response?.status === 429) {
                console.log(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –¥–ª—è "${requestConfig.name}". –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}`);
                if (attempt < retries) {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    const waitTime = attempt * 10000; // 10, 20, 30 —Å–µ–∫—É–Ω–¥
                    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime/1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                    await delay(waitTime);
                    continue;
                }
            }
            
            if (attempt === retries) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ "${requestConfig.name}" –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
                throw error;
            }
            
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ "${requestConfig.name}". –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}:`, error.message);
            await delay(5000); // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async function checkExistingData(date) {
    try {
        const result = await client.query(
            'SELECT COUNT(*) FROM topvisor.positions WHERE event_date = $1',
            [date]
        );
        return parseInt(result.rows[0].count, 10);
    } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
        return 0;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
async function processAndSaveData(data, requestName) {
    if (!data.result || !data.result.keywords) {
        console.log(`‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è "${requestName}"`);
        return 0;
    }

    let recordsInserted = 0;
    console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ ${data.result.keywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è "${requestName}"`);

    for (const keyword of data.result.keywords) {
        const request = keyword.name;

        if (!keyword.positionsData || Object.keys(keyword.positionsData).length === 0) {
            console.log(`   üîë "${request}" - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π`);
            continue;
        }

        let keywordRecords = 0;
        for (const key in keyword.positionsData) {
            const [event_date, project_id, region_index] = key.split(":");
            const positionData = keyword.positionsData[key];
            
            let position = positionData.position;
            let relevant_url = positionData.relevant_url || '';
            let snippet = positionData.snippet || '';

            // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
            if (position === "--") {
                position = null;
            } else {
                position = parseInt(position, 10);
            }

            // –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            const project_name = projectMap[project_id] || project_id;
            const search_engine = searchEngineMap[region_index] || region_index;

            try {
                // –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
                await client.query(
                    `INSERT INTO topvisor.positions (request, event_date, project_name, search_engine, position, relevant_url, snippet)
                     VALUES ($1, $2, $3, $4, $5, $6, $7)`,
                    [request, event_date, project_name, search_engine, position, relevant_url, snippet]
                );
                
                recordsInserted++;
                keywordRecords++;
            } catch (dbError) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è "${request}": ${dbError.message}`);
            }
        }
        
        if (keywordRecords > 0) {
            console.log(`   üîë "${request}" - –∑–∞–ø–∏—Å–∞–Ω–æ ${keywordRecords} –ø–æ–∑–∏—Ü–∏–π`);
        }
    }

    console.log(`üìä –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ ${recordsInserted} –∑–∞–ø–∏—Å–µ–π –¥–ª—è "${requestName}"`);
    return recordsInserted;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –±–∞—Ç—á–∏
function chunkArray(array, chunkSize) {
    const chunks = [];
    for (let i = 0; i < array.length; i += chunkSize) {
        chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fetchAndSaveAll() {
    const startTime = new Date();
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        await client.connect();
        console.log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await client.query(`
            CREATE TABLE IF NOT EXISTS topvisor.positions (
                id SERIAL PRIMARY KEY,
                request TEXT NOT NULL,
                event_date DATE NOT NULL,
                project_name TEXT NOT NULL,
                search_engine TEXT NOT NULL,
                position INT,
                relevant_url TEXT NOT NULL,
                snippet TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log("üìã –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        const existingRecords = await checkExistingData(FINAL_START_DATE);
        if (existingRecords > 0 && !process.env.FORCE_OVERRIDE) {
            console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${existingRecords} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${FINAL_START_DATE}`);
            console.log("üí° –î–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: FORCE_OVERRIDE=true");
            console.log("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è");
            return;
        }

        if (existingRecords > 0 && process.env.FORCE_OVERRIDE === 'true') {
            console.log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å: —É–¥–∞–ª—è—é ${existingRecords} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${FINAL_START_DATE}`);
            await client.query('DELETE FROM topvisor.positions WHERE event_date = $1', [FINAL_START_DATE]);
        }

        // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 4 (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç 5)
        const requestBatches = chunkArray(apiRequests, 4);
        let totalRecords = 0;

        for (let batchIndex = 0; batchIndex < requestBatches.length; batchIndex++) {
            const batch = requestBatches[batchIndex];
            console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${batchIndex + 1}/${requestBatches.length} (${batch.length} –∑–∞–ø—Ä–æ—Å–æ–≤)`);

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞—Ç—á–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const promises = batch.map(requestConfig => 
                makeApiRequest(requestConfig)
                    .then(data => ({ success: true, data, requestConfig }))
                    .catch(error => ({ success: false, error, requestConfig }))
            );

            const results = await Promise.all(promises);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for (const result of results) {
                if (result.success) {
                    const recordCount = await processAndSaveData(result.data, result.requestConfig.name);
                    totalRecords += recordCount;
                } else {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å "${result.requestConfig.name}":`, result.error.message);
                }
            }

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if (batchIndex < requestBatches.length - 1) {
                console.log("‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...");
                await delay(5000);
            }
        }

        const endTime = new Date();
        const duration = Math.round((endTime - startTime) / 1000);
        
        console.log(`\n‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ ${totalRecords} –∑–∞–ø–∏—Å–µ–π –≤ PostgreSQL`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);

    } catch (err) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err.message);
        throw err;
    } finally {
        await client.end();
        console.log("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ");
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤...");
console.log(`üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: ${FINAL_START_DATE} - ${FINAL_END_DATE}`);
console.log(`ü§ñ –†–µ–∂–∏–º: ${MANUAL_MODE ? '–†—É—á–Ω–æ–π' : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å)'}`);
console.log(`üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`);
console.log(`üìä –°–µ–≥–æ–¥–Ω—è: ${getFormattedDate(0)}`);
console.log(`üìä –í—á–µ—Ä–∞: ${getFormattedDate(-1)}`);

if (process.env.FORCE_OVERRIDE === 'true') {
    console.log("‚ö†Ô∏è –†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
const today = new Date();
const requestDate = new Date(FINAL_START_DATE);
const daysDifference = Math.floor((today - requestDate) / (1000 * 60 * 60 * 24));

console.log(`üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –¥–∞—Ç—ã:`);
console.log(`   - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞: ${FINAL_START_DATE}`);
console.log(`   - –†–∞–∑–Ω–∏—Ü–∞ —Å —Å–µ–≥–æ–¥–Ω—è: ${daysDifference} –¥–Ω–µ–π`);

if (daysDifference < 1) {
    console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É!`);
    console.log(`   –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.`);
    console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∏–Ω–∏–º—É–º –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.`);
} else if (daysDifference > 90) {
    console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∑–∞ ${daysDifference} –¥–Ω–µ–π –Ω–∞–∑–∞–¥.`);
    console.log(`   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.`);
}

console.log("");

fetchAndSaveAll()
    .then(() => {
        console.log("\nüéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        process.exit(0);
    })
    .catch((error) => {
        console.error("\nüí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:", error.message);
        process.exit(1);
    });