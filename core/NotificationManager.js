// core/NotificationManager.js
const axios = require('axios');
const Logger = require('./Logger');

class NotificationManager {
    constructor() {
        this.logger = new Logger('notifications');
        this.botToken = process.env.TELEGRAM_BOT_TOKEN;
        this.chatId = process.env.TELEGRAM_CHAT_ID;
        this.enabled = !!(this.botToken && this.chatId);
        
        // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        this.dailyStats = new Map();
        
        if (!this.enabled) {
            this.logger.warn('Telegram notifications disabled - missing bot token or chat ID');
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞
     */
    async sendStart(serviceName) {
        if (!this.enabled) return;

        const message = `üöÄ <b>${serviceName.toUpperCase()}</b> –∑–∞–ø—É—â–µ–Ω\n‚è∞ ${this.formatTime(new Date())}`;
        
        try {
            await this.sendMessage(message);
            this.logger.info(`Start notification sent for ${serviceName}`);
        } catch (error) {
            this.logger.error(`Failed to send start notification for ${serviceName}`, error);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
     */
    async sendSuccess(serviceName, stats, executionTime) {
        if (!this.enabled) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        this.dailyStats.set(serviceName, {
            status: 'success',
            stats,
            executionTime,
            timestamp: new Date()
        });

        const message = this.buildSuccessMessage(serviceName, stats, executionTime);
        
        try {
            await this.sendMessage(message);
            this.logger.info(`Success notification sent for ${serviceName}`);
        } catch (error) {
            this.logger.error(`Failed to send success notification for ${serviceName}`, error);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    async sendError(serviceName, error, executionTime) {
        if (!this.enabled) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        this.dailyStats.set(serviceName, {
            status: 'error',
            error: error.message,
            executionTime,
            timestamp: new Date()
        });

        const message = this.buildErrorMessage(serviceName, error, executionTime);
        
        try {
            await this.sendMessage(message);
            this.logger.info(`Error notification sent for ${serviceName}`);
        } catch (error) {
            this.logger.error(`Failed to send error notification for ${serviceName}`, error);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
     */
    async sendWarning(serviceName, stats, warnings, executionTime) {
        if (!this.enabled) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        this.dailyStats.set(serviceName, {
            status: 'warning',
            stats,
            warnings,
            executionTime,
            timestamp: new Date()
        });

        const message = this.buildWarningMessage(serviceName, stats, warnings, executionTime);
        
        try {
            await this.sendMessage(message);
            this.logger.info(`Warning notification sent for ${serviceName}`);
        } catch (error) {
            this.logger.error(`Failed to send warning notification for ${serviceName}`, error);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    async sendDailyReport(date = new Date()) {
        if (!this.enabled || this.dailyStats.size === 0) return;

        const report = this.buildDailyReport(date);
        
        try {
            await this.sendMessage(report, { parse_mode: 'HTML' });
            this.logger.info('Daily report sent');
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
            this.dailyStats.clear();
        } catch (error) {
            this.logger.error('Failed to send daily report', error);
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     */
    buildSuccessMessage(serviceName, stats, executionTime) {
        const emoji = '‚úÖ';
        let message = `${emoji} <b>${serviceName.toUpperCase()}</b> –∑–∞–≤–µ—Ä—à–µ–Ω\n`;
        
        if (stats.inserted > 0) {
            message += `üìù –ó–∞–ø–∏—Å–∞–Ω–æ: <b>${stats.inserted.toLocaleString()}</b>\n`;
        }
        
        if (stats.updated > 0) {
            message += `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: <b>${stats.updated.toLocaleString()}</b>\n`;
        }
        
        if (stats.processed > 0) {
            message += `üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${stats.processed.toLocaleString()}</b>\n`;
        }
        
        if (stats.warnings && stats.warnings.length > 0) {
            message += `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${stats.warnings.length}\n`;
        }
        
        message += `‚è±Ô∏è –í—Ä–µ–º—è: ${this.formatDuration(executionTime)}`;
        
        return message;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    buildErrorMessage(serviceName, error, executionTime) {
        let message = `‚ùå <b>${serviceName.toUpperCase()}</b> –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π\n`;
        message += `üí• –û—à–∏–±–∫–∞: <code>${error.message}</code>\n`;
        message += `‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${this.formatDuration(executionTime)}`;
        
        return message;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
     */
    buildWarningMessage(serviceName, stats, warnings, executionTime) {
        let message = `‚ö†Ô∏è <b>${serviceName.toUpperCase()}</b> –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏\n`;
        
        if (stats.inserted > 0) {
            message += `üìù –ó–∞–ø–∏—Å–∞–Ω–æ: <b>${stats.inserted.toLocaleString()}</b>\n`;
        }
        
        message += `üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n`;
        warnings.forEach(warning => {
            message += `  ‚Ä¢ ${warning}\n`;
        });
        
        message += `‚è±Ô∏è –í—Ä–µ–º—è: ${this.formatDuration(executionTime)}`;
        
        return message;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    buildDailyReport(date) {
        const dateStr = date.toLocaleDateString('ru-RU');
        let report = `üìä <b>–û–¢–ß–ï–¢ –ó–ê ${dateStr}</b>\n\n`;

        const successful = [];
        const warnings = [];
        const errors = [];
        let totalRecords = 0;
        let totalTime = 0;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        for (const [serviceName, data] of this.dailyStats) {
            totalTime += data.executionTime || 0;

            switch (data.status) {
                case 'success':
                    const records = (data.stats.inserted || 0) + (data.stats.updated || 0);
                    totalRecords += records;
                    successful.push(`‚Ä¢ <b>${serviceName}</b>: ${records.toLocaleString()} –∑–∞–ø–∏—Å–µ–π`);
                    break;
                    
                case 'warning':
                    const warnRecords = (data.stats.inserted || 0) + (data.stats.updated || 0);
                    totalRecords += warnRecords;
                    const warnText = data.warnings ? ` (${data.warnings.join(', ')})` : '';
                    warnings.push(`‚Ä¢ <b>${serviceName}</b>: ${warnRecords.toLocaleString()} –∑–∞–ø–∏—Å–µ–π${warnText}`);
                    break;
                    
                case 'error':
                    errors.push(`‚Ä¢ <b>${serviceName}</b>: ${data.error}`);
                    break;
            }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if (successful.length > 0) {
            report += `üü¢ <b>–£–°–ü–ï–®–ù–û:</b>\n${successful.join('\n')}\n\n`;
        }

        if (warnings.length > 0) {
            report += `üü° <b>–° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò:</b>\n${warnings.join('\n')}\n\n`;
        }

        if (errors.length > 0) {
            report += `üî¥ <b>–û–®–ò–ë–ö–ò:</b>\n${errors.join('\n')}\n\n`;
        }

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report += `üìà <b>–ò–¢–û–ì–û:</b>\n`;
        report += `üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>${totalRecords.toLocaleString()}</b>\n`;
        report += `‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: <b>${this.formatDuration(totalTime)}</b>\n`;
        report += `üîß –°–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: <b>${this.dailyStats.size}</b>\n\n`;

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
        const tomorrow = new Date(date);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(8, 0, 0, 0);
        report += `‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: <b>${tomorrow.toLocaleString('ru-RU')}</b>`;

        return report;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     */
    async sendMessage(text, options = {}) {
        if (!this.enabled) return;

        const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;
        
        const payload = {
            chat_id: this.chatId,
            text: text,
            parse_mode: options.parse_mode || 'HTML',
            disable_notification: options.silent || false
        };

        const response = await axios.post(url, payload);
        return response.data;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(date) {
        return date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit',
            second: '2-digit'
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    formatDuration(seconds) {
        if (seconds < 60) {
            return `${seconds}—Å`;
        }
        
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        
        if (minutes < 60) {
            return remainingSeconds > 0 
                ? `${minutes}–º ${remainingSeconds}—Å`
                : `${minutes}–º`;
        }
        
        const hours = Math.floor(minutes / 60);
        const remainingMinutes = minutes % 60;
        
        return remainingMinutes > 0
            ? `${hours}—á ${remainingMinutes}–º`
            : `${hours}—á`;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendTest() {
        if (!this.enabled) {
            throw new Error('Telegram notifications not configured');
        }

        const message = `üß™ <b>–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n‚è∞ ${this.formatTime(new Date())}\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`;
        
        try {
            await this.sendMessage(message);
            this.logger.info('Test notification sent successfully');
            return true;
        } catch (error) {
            this.logger.error('Failed to send test notification', error);
            throw error;
        }
    }
}

module.exports = NotificationManager;