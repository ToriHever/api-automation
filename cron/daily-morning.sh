#!/bin/bash

# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –ê–í–¢–û–ó–ê–ü–£–°–ö–ê API –ö–û–õ–õ–ï–ö–¢–û–†–û–í
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞–ø–∫—É, –æ—Ç–∫—É–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–∞–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö API"
echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(whoami)"
echo "üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
echo "üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $(date)"

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_DIR" || {
    echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export NODE_ENV=production
export PATH="/usr/bin:/bin:/usr/local/bin:$PATH"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p logs/services/{topvisor,wordstat,clarity,ga4,gsc,yandex-metrika}
mkdir -p logs/system
mkdir -p logs/errors

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É logs
if [ ! -w logs ]; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É logs"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $1" >> logs/system/cron.log
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
if [ ! -f "scripts/run-service.js" ]; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª scripts/run-service.js –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $PROJECT_DIR"
    log_message "ERROR: scripts/run-service.js not found"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå –û–®–ò–ë–ö–ê: Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
    log_message "ERROR: Node.js not found"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if [ ! -d "node_modules" ]; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –ü–∞–ø–∫–∞ node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm install"
    log_message "ERROR: node_modules not found"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ ! -f ".env" ]; then
    echo "‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    log_message "ERROR: .env file not found"
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ)
SERVICE="${1:-}"
DATE_TODAY=$(date +%Y%m%d)
LOG_FILE="logs/system/daily_${DATE_TODAY}.log"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
run_service() {
    local service="$1"
    local service_log="logs/services/$service/daily_${DATE_TODAY}.log"
    
    log_message "Starting $service collector from $PROJECT_DIR"
    
    if [ -n "$service" ]; then
        echo "üéØ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: $service"
        node scripts/run-service.js "$service" >> "$service_log" 2>&1
    else
        echo "üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        node scripts/run-service.js >> "$LOG_FILE" 2>&1
    fi
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        log_message "Finished successfully${service:+ for $service}"
        return 0
    else
        echo "‚ùå –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: $exit_code)"
        log_message "Finished with errors${service:+ for $service} (exit code: $exit_code)"
        
        # –ö–æ–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥
        if [ -n "$service" ] && [ -f "$service_log" ]; then
            tail -n 50 "$service_log" >> "logs/errors/error_${DATE_TODAY}.log"
        elif [ -f "$LOG_FILE" ]; then
            tail -n 50 "$LOG_FILE" >> "logs/errors/error_${DATE_TODAY}.log"
        fi
        
        return $exit_code
    fi
}

# –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
if run_service "$SERVICE"; then
    echo "üéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    exit 0
else
    echo "üí• –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏"
    exit 1
fi
