// scripts/run-service.js
const path = require('path');
const fs = require('fs');
require('dotenv').config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
async function getCollector(serviceName) {
    const collectorsMap = {
        'topvisor': () => require('../services/topvisor/TopVisorCollector'),
        'wordstat': () => require('../services/wordstat/WordStatCollector'),
        'clarity': () => require('../services/clarity/ClarityCollector'),
        'ga4': () => require('../services/ga4/GA4Collector'),
        'gsc': () => require('../services/gsc/GSCCollector'),
        'yandex-metrika': () => require('../services/yandex-metrika/YandexMetrikaCollector')
    };

    if (!collectorsMap[serviceName]) {
        throw new Error(`–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ "${serviceName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    try {
        const CollectorClass = collectorsMap[serviceName]();
        return new CollectorClass();
    } catch (error) {
        if (error.code === 'MODULE_NOT_FOUND') {
            console.error(`‚ùå –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ "${serviceName}" –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`);
            console.log(`üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: services/${serviceName}/${serviceName.charAt(0).toUpperCase() + serviceName.slice(1)}Collector.js`);
        }
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
function getFormattedDate(daysOffset = 0) {
    const date = new Date();
    date.setDate(date.getDate() + daysOffset);
    return date.toISOString().split('T')[0];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
function loadServicesConfig() {
    const configPath = path.join(__dirname, '../config/services.json');
    
    if (fs.existsSync(configPath)) {
        return JSON.parse(fs.readFileSync(configPath, 'utf8'));
    }
    
    // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    return {
        topvisor: { enabled: true, priority: 1 },
        wordstat: { enabled: false, priority: 2 },
        clarity: { enabled: false, priority: 3 },
        ga4: { enabled: false, priority: 4 },
        gsc: { enabled: false, priority: 5 },
        'yandex-metrika': { enabled: false, priority: 6 }
    };
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArguments() {
    const args = process.argv.slice(2);
    const options = {
        service: null,
        startDate: null,
        endDate: null,
        manualMode: false,
        forceOverride: false,
        help: false
    };

    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        
        switch (arg) {
            case '--service':
            case '-s':
                options.service = args[++i];
                break;
            case '--start-date':
                options.startDate = args[++i];
                options.manualMode = true;
                break;
            case '--end-date':
                options.endDate = args[++i];
                options.manualMode = true;
                break;
            case '--force':
            case '-f':
                options.forceOverride = true;
                break;
            case '--manual':
            case '-m':
                options.manualMode = true;
                break;
            case '--help':
            case '-h':
                options.help = true;
                break;
            default:
                if (!options.service && !arg.startsWith('-')) {
                    options.service = arg;
                }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (process.env.MANUAL_MODE === 'true') {
        options.manualMode = true;
    }
    if (process.env.MANUAL_START_DATE) {
        options.startDate = process.env.MANUAL_START_DATE;
        options.manualMode = true;
    }
    if (process.env.MANUAL_END_DATE) {
        options.endDate = process.env.MANUAL_END_DATE;
        options.manualMode = true;
    }
    if (process.env.FORCE_OVERRIDE === 'true') {
        options.forceOverride = true;
    }

    return options;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
    console.log(`
üöÄ –ó–ê–ü–£–°–ö –ö–û–õ–õ–ï–ö–¢–û–†–û–í API –î–ê–ù–ù–´–•

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  node scripts/run-service.js [–û–ü–¶–ò–ò] [–°–ï–†–í–ò–°]

–°–ï–†–í–ò–°–´:
  topvisor         TopVisor –ø–æ–∑–∏—Ü–∏–∏
  wordstat         –Ø–Ω–¥–µ–∫—Å.Wordstat
  clarity          Microsoft Clarity
  ga4              Google Analytics 4
  gsc              Google Search Console
  yandex-metrika   –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞

–û–ü–¶–ò–ò:
  -s, --service <name>     –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
  --start-date <date>      –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
  --end-date <date>        –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
  -m, --manual             –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º
  -f, --force              –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
  -h, --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–≤—á–µ—Ä–∞—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ)
  node scripts/run-service.js topvisor

  # –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏  
  node scripts/run-service.js topvisor --start-date 2025-09-15 --end-date 2025-09-15

  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  node scripts/run-service.js topvisor --force

–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:
  MANUAL_MODE=true         –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º
  MANUAL_START_DATE=date   –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
  MANUAL_END_DATE=date     –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞  
  FORCE_OVERRIDE=true      –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
    `);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API —Å–µ—Ä–≤–∏—Å–æ–≤');
    console.log(`üïê –ó–∞–ø—É—Å–∫: ${new Date().toLocaleString('ru-RU')}\n`);

    const options = parseArguments();

    if (options.help) {
        showHelp();
        process.exit(0);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤
    const servicesConfig = loadServicesConfig();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    let servicesToRun = [];
    
    if (options.service) {
        // –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        if (!servicesConfig[options.service]) {
            console.error(`‚ùå –°–µ—Ä–≤–∏—Å "${options.service}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
            console.log('\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:');
            Object.keys(servicesConfig).forEach(name => {
                console.log(`   - ${name}`);
            });
            process.exit(1);
        }
        servicesToRun = [{ name: options.service, config: servicesConfig[options.service] }];
    } else {
        // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        servicesToRun = Object.entries(servicesConfig)
            .filter(([name, config]) => config.enabled)
            .map(([name, config]) => ({ name, config }))
            .sort((a, b) => (a.config.priority || 999) - (b.config.priority || 999));
    }

    if (servicesToRun.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
        console.log('üí° –í–∫–ª—é—á–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –≤ config/services.json –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å');
        process.exit(0);
    }

    console.log(`üéØ –ö –∑–∞–ø—É—Å–∫—É: ${servicesToRun.map(s => s.name).join(', ')}\n`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    const results = new Map();
    
    for (const serviceInfo of servicesToRun) {
        const { name: serviceName, config: serviceConfig } = serviceInfo;
        
        try {
            console.log(`\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: ${serviceName.toUpperCase()}`);
            console.log(`‚öôÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${serviceConfig.priority || '–Ω–µ –∑–∞–¥–∞–Ω'}`);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            let startDate = options.startDate;
            let endDate = options.endDate;

            if (!options.manualMode) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
                // dateOffset –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é -1 –¥–ª—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è)
                const dateOffset = serviceConfig.dateOffset !== undefined 
                    ? serviceConfig.dateOffset 
                    : -1;
                
                startDate = getFormattedDate(dateOffset);
                endDate = getFormattedDate(dateOffset);
                
                console.log(`üìÖ –î–∞—Ç—ã (—Å–º–µ—â–µ–Ω–∏–µ ${dateOffset} –¥–Ω–µ–π): ${startDate} - ${endDate}`);
            } else {
                console.log(`üìÖ –î–∞—Ç—ã (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º): ${startDate} - ${endDate}`);
            }

            if (!startDate || !endDate) {
                console.error(`‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ${serviceName}`);
                console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --start-date –∏ --end-date –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º');
                throw new Error('–î–∞—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
            }
            
            if (options.forceOverride) {
                console.log('‚ö†Ô∏è –†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
            const collector = await getCollector(serviceName);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            const stats = await collector.run({
                startDate,
                endDate,
                manualMode: options.manualMode,
                forceOverride: options.forceOverride
            });
            
            results.set(serviceName, { success: true, stats });
            console.log(`‚úÖ ${serviceName.toUpperCase()} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ ${serviceName.toUpperCase()}:`, error.message);
            results.set(serviceName, { success: false, error });
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if (serviceInfo !== servicesToRun[servicesToRun.length - 1]) {
            console.log('‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏...');
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '='.repeat(50));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(50));
    
    const successful = [];
    const failed = [];
    let totalRecords = 0;
    
    for (const [serviceName, result] of results) {
        if (result.success) {
            const records = (result.stats.inserted || 0) + (result.stats.updated || 0);
            totalRecords += records;
            successful.push({ name: serviceName, records, stats: result.stats });
        } else {
            failed.push({ name: serviceName, error: result.error });
        }
    }
    
    if (successful.length > 0) {
        console.log('\n‚úÖ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´:');
        successful.forEach(s => {
            console.log(`   ‚Ä¢ ${s.name}: ${s.records.toLocaleString()} –∑–∞–ø–∏—Å–µ–π`);
        });
    }
    
    if (failed.length > 0) {
        console.log('\n‚ùå –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–û–ô:');
        failed.forEach(f => {
            console.log(`   ‚Ä¢ ${f.name}: ${f.error.message}`);
        });
    }
    
    console.log(`\nüìà –ò–¢–û–ì–û: ${totalRecords.toLocaleString()} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    console.log(`üïê –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    process.exit(failed.length > 0 ? 1 : 0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if (require.main === module) {
    main().catch((error) => {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        process.exit(1);
    });
}